(function (html2canvas) {
	'use strict';

	html2canvas = html2canvas && html2canvas.hasOwnProperty('default') ? html2canvas['default'] : html2canvas;

	erpnext.HierarchyChart = class {
		/* Options:
			- doctype
			- wrapper: wrapper for the hierarchy view
			- method:
				- to get the data for each node
				- this method should return id, name, title, image, and connections for each node
		*/
		constructor(doctype, wrapper, method) {
			this.page = wrapper.page;
			this.method = method;
			this.doctype = doctype;

			this.setup_page_style();
			this.page.main.addClass('frappe-card');

			this.nodes = {};
			this.setup_node_class();
		}

		setup_page_style() {
			this.page.main.css({
				'min-height': '300px',
				'max-height': '600px',
				'overflow': 'auto',
				'position': 'relative'
			});
		}

		setup_node_class() {
			var me = this;
			this.Node = class {
				constructor(ref) {
				var id = ref.id;
				var parent = ref.parent;
				var parent_id = ref.parent_id;
				var image = ref.image;
				var name = ref.name;
				var title = ref.title;
				var expandable = ref.expandable;
				var connections = ref.connections;
				var is_root = ref.is_root;

					// to setup values passed via constructor
					$.extend(this, arguments[0]);

					this.expanded = 0;

					me.nodes[this.id] = this;
					me.make_node_element(this);

					if (!me.all_nodes_expanded) {
						me.setup_node_click_action(this);
					}

					me.setup_edit_node_action(this);
				}
			};
		}

		make_node_element(node) {
			var node_card = frappe.render_template('node_card', {
				id: node.id,
				name: node.name,
				title: node.title,
				image: node.image,
				parent: node.parent_id,
				connections: node.connections,
				is_mobile: false
			});

			node.parent.append(node_card);
			node.$link = $(("[id=\"" + (node.id) + "\"]"));
		}

		show() {
			this.setup_actions();
			if ($("[data-fieldname=\"company\"]").length) { return; }
			var me = this;

			var company = this.page.add_field({
				fieldtype: 'Link',
				options: 'Company',
				fieldname: 'company',
				placeholder: __('Select Company'),
				default: frappe.defaults.get_default('company'),
				only_select: true,
				reqd: 1,
				change: function () {
					me.company = undefined;
					$('#hierarchy-chart-wrapper').remove();

					if (company.get_value()) {
						me.company = company.get_value();

						// svg for connectors
						me.make_svg_markers();
						me.setup_hierarchy();
						me.render_root_nodes();
						me.all_nodes_expanded = false;
					} else {
						frappe.throw(__('Please select a company first.'));
					}
				}
			});

			company.refresh();
			$("[data-fieldname=\"company\"]").trigger('change');
			$("[data-fieldname=\"company\"] .link-field").css('z-index', 2);
		}

		setup_actions() {
			var me = this;
			this.page.clear_inner_toolbar();
			this.page.add_inner_button(__('Export'), function() {
				me.export_chart();
			});

			this.page.add_inner_button(__('Expand All'), function() {
				me.load_children(me.root_node, true);
				me.all_nodes_expanded = true;

				me.page.remove_inner_button(__('Expand All'));
				me.page.add_inner_button(__('Collapse All'), function() {
					me.setup_hierarchy();
					me.render_root_nodes();
					me.all_nodes_expanded = false;

					me.page.remove_inner_button(__('Collapse All'));
					me.setup_actions();
				});
			});
		}

		export_chart() {
			frappe.dom.freeze(__('Exporting...'));
			this.page.main.css({
				'min-height': '',
				'max-height': '',
				'overflow': 'visible',
				'position': 'fixed',
				'left': '0',
				'top': '0'
			});

			$('.node-card').addClass('exported');

			html2canvas(document.querySelector('#hierarchy-chart-wrapper'), {
				scrollY: -window.scrollY,
				scrollX: 0
			}).then(function(canvas) {
				// Export the canvas to its data URI representation
				var dataURL = canvas.toDataURL('image/png');

				// download the image
				var a = document.createElement('a');
				a.href = dataURL;
				a.download = 'hierarchy_chart';
				a.click();
			}).finally(function () {
				frappe.dom.unfreeze();
			});

			this.setup_page_style();
			$('.node-card').removeClass('exported');
		}

		setup_hierarchy() {
			if (this.$hierarchy)
				{ this.$hierarchy.remove(); }

			$("#connectors").empty();

			// setup hierarchy
			this.$hierarchy = $(
				"<ul class=\"hierarchy\">\n\t\t\t\t<li class=\"root-level level\">\n\t\t\t\t\t<ul class=\"node-children\"></ul>\n\t\t\t\t</li>\n\t\t\t</ul>");

			this.page.main
				.find('#hierarchy-chart')
				.empty()
				.append(this.$hierarchy);

			this.nodes = {};
		}

		make_svg_markers() {
			$('#hierarchy-chart-wrapper').remove();

			this.page.main.append("\n\t\t\t<div id=\"hierarchy-chart-wrapper\">\n\t\t\t\t<svg id=\"arrows\" width=\"100%\" height=\"100%\">\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<marker id=\"arrowhead-active\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto\" fill=\"var(--blue-500)\">\n\t\t\t\t\t\t\t<path d=\"M 0 0 L 10 5 L 0 10 z\"></path>\n\t\t\t\t\t\t</marker>\n\t\t\t\t\t\t<marker id=\"arrowhead-collapsed\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto\" fill=\"var(--blue-300)\">\n\t\t\t\t\t\t\t<path d=\"M 0 0 L 10 5 L 0 10 z\"></path>\n\t\t\t\t\t\t</marker>\n\n\t\t\t\t\t\t<marker id=\"arrowstart-active\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\" fill=\"var(--blue-500)\">\n\t\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"3.5\" fill=\"white\" stroke=\"var(--blue-500)\"/>\n\t\t\t\t\t\t</marker>\n\t\t\t\t\t\t<marker id=\"arrowstart-collapsed\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\" fill=\"var(--blue-300)\">\n\t\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"3.5\" fill=\"white\" stroke=\"var(--blue-300)\"/>\n\t\t\t\t\t\t</marker>\n\t\t\t\t\t</defs>\n\t\t\t\t\t<g id=\"connectors\" fill=\"none\">\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t\t<div id=\"hierarchy-chart\">\n\t\t\t\t</div>\n\t\t\t</div>");
		}

		render_root_nodes(expanded_view) {
			if ( expanded_view === void 0 ) expanded_view=false;

			var me = this;

			return frappe.call({
				method: me.method,
				args: {
					company: me.company
				}
			}).then(function (r) {
				if (r.message.length) {
					var expand_node = undefined;
					var node = undefined;

					$.each(r.message, function (_i, data) {
						if ($(("[id=\"" + (data.id) + "\"]")).length)
							{ return; }

						node = new me.Node({
							id: data.id,
							parent: $('<li class="child-node"></li>').appendTo(me.$hierarchy.find('.node-children')),
							parent_id: undefined,
							image: data.image,
							name: data.name,
							title: data.title,
							expandable: true,
							connections: data.connections,
							is_root: true
						});

						if (!expand_node && data.connections)
							{ expand_node = node; }
					});

					me.root_node = expand_node;
					if (!expanded_view) {
						me.expand_node(expand_node);
					}
				}
			});
		}

		expand_node(node) {
			var is_sibling = this.selected_node && this.selected_node.parent_id === node.parent_id;
			this.set_selected_node(node);
			this.show_active_path(node);
			this.collapse_previous_level_nodes(node);

			// since the previous node collapses, all connections to that node need to be rebuilt
			// if a sibling node is clicked, connections don't need to be rebuilt
			if (!is_sibling) {
				// rebuild outgoing connections
				this.refresh_connectors(node.parent_id);

				// rebuild incoming connections
				var grandparent = $(("[id=\"" + (node.parent_id) + "\"]")).attr('data-parent');
				this.refresh_connectors(grandparent);
			}

			if (node.expandable && !node.expanded) {
				return this.load_children(node);
			}
		}

		collapse_node() {
			if (this.selected_node.expandable) {
				this.selected_node.$children.hide();
				$(("path[data-parent=\"" + (this.selected_node.id) + "\"]")).hide();
				this.selected_node.expanded = false;
			}
		}

		show_active_path(node) {
			// mark node parent on active path
			$(("[id=\"" + (node.parent_id) + "\"]")).addClass('active-path');
		}

		load_children(node, deep) {
			var this$1 = this;
			if ( deep === void 0 ) deep=false;

			if (!deep) {
				frappe.run_serially([
					function () { return this$1.get_child_nodes(node.id); },
					function (child_nodes) { return this$1.render_child_nodes(node, child_nodes); }
				]);
			} else {
				frappe.run_serially([
					function () { return frappe.dom.freeze(); },
					function () { return this$1.setup_hierarchy(); },
					function () { return this$1.render_root_nodes(true); },
					function () { return this$1.get_all_nodes(); },
					function (data_list) { return this$1.render_children_of_all_nodes(data_list); },
					function () { return frappe.dom.unfreeze(); }
				]);
			}
		}

		get_child_nodes(node_id) {
			var me = this;
			return new Promise(function (resolve) {
				frappe.call({
					method: me.method,
					args: {
						parent: node_id,
						company: me.company
					}
				}).then(function (r) { return resolve(r.message); });
			});
		}

		render_child_nodes(node, child_nodes) {
			var this$1 = this;

			var last_level = this.$hierarchy.find('.level:last').index();
			var current_level = $(("[id=\"" + (node.id) + "\"]")).parent().parent().parent().index();

			if (last_level === current_level) {
				this.$hierarchy.append("\n\t\t\t\t<li class=\"level\"></li>\n\t\t\t");
			}

			if (!node.$children) {
				node.$children = $('<ul class="node-children"></ul>')
					.hide()
					.appendTo(this.$hierarchy.find('.level:last'));

				node.$children.empty();

				if (child_nodes) {
					$.each(child_nodes, function (_i, data) {
						if (!$(("[id=\"" + (data.id) + "\"]")).length) {
							this$1.add_node(node, data);
							setTimeout(function () {
								this$1.add_connector(node.id, data.id);
							}, 250);
						}
					});
				}
			}

			node.$children.show();
			$(("path[data-parent=\"" + (node.id) + "\"]")).show();
			node.expanded = true;
		}

		get_all_nodes() {
			var me = this;
			return new Promise(function (resolve) {
				frappe.call({
					method: 'erpnext.utilities.hierarchy_chart.get_all_nodes',
					args: {
						method: me.method,
						company: me.company
					},
					callback: function (r) {
						resolve(r.message);
					}
				});
			});
		}

		render_children_of_all_nodes(data_list) {
			var entry = undefined;
			var node = undefined;

			while (data_list.length) {
				// to avoid overlapping connectors
				entry = data_list.shift();
				node = this.nodes[entry.parent];
				if (node) {
					this.render_child_nodes_for_expanded_view(node, entry.data);
				} else if (data_list.length) {
					data_list.push(entry);
				}
			}
		}

		render_child_nodes_for_expanded_view(node, child_nodes) {
			var this$1 = this;

			node.$children = $('<ul class="node-children"></ul>');

			var last_level = this.$hierarchy.find('.level:last').index();
			var node_level = $(("[id=\"" + (node.id) + "\"]")).parent().parent().parent().index();

			if (last_level === node_level) {
				this.$hierarchy.append("\n\t\t\t\t<li class=\"level\"></li>\n\t\t\t");
				node.$children.appendTo(this.$hierarchy.find('.level:last'));
			} else {
				node.$children.appendTo(this.$hierarchy.find('.level:eq(' + (node_level + 1) + ')'));
			}

			node.$children.hide().empty();

			if (child_nodes) {
				$.each(child_nodes, function (_i, data) {
					this$1.add_node(node, data);
					setTimeout(function () {
						this$1.add_connector(node.id, data.id);
					}, 250);
				});
			}

			node.$children.show();
			$(("path[data-parent=\"" + (node.id) + "\"]")).show();
			node.expanded = true;
		}

		add_node(node, data) {
			return new this.Node({
				id: data.id,
				parent: $('<li class="child-node"></li>').appendTo(node.$children),
				parent_id: node.id,
				image: data.image,
				name: data.name,
				title: data.title,
				expandable: data.expandable,
				connections: data.connections,
				children: undefined
			});
		}

		add_connector(parent_id, child_id) {
			// using pure javascript for better performance
			var parent_node = document.getElementById(("" + parent_id));
			var child_node = document.getElementById(("" + child_id));

			var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');

			// we need to connect right side of the parent to the left side of the child node
			var pos_parent_right = {
				x: parent_node.offsetLeft + parent_node.offsetWidth,
				y: parent_node.offsetTop + parent_node.offsetHeight / 2
			};
			var pos_child_left = {
				x: child_node.offsetLeft - 5,
				y: child_node.offsetTop + child_node.offsetHeight / 2
			};

			var connector = this.get_connector(pos_parent_right, pos_child_left);

			path.setAttribute('d', connector);
			this.set_path_attributes(path, parent_id, child_id);

			document.getElementById('connectors').appendChild(path);
		}

		get_connector(pos_parent_right, pos_child_left) {
			if (pos_parent_right.y === pos_child_left.y) {
				// don't add arcs if it's a straight line
				return "M" +
				(pos_parent_right.x) + "," + (pos_parent_right.y) + " " +
				"L"+
				(pos_child_left.x) + "," + (pos_child_left.y);
			} else {
				var arc_1 = "";
				var arc_2 = "";
				var offset = 0;

				if (pos_parent_right.y > pos_child_left.y) {
					// if child is above parent on Y axis 1st arc is anticlocwise
					// second arc is clockwise
					arc_1 = "a10,10 1 0 0 10,-10 ";
					arc_2 = "a10,10 0 0 1 10,-10 ";
					offset = 10;
				} else {
					// if child is below parent on Y axis 1st arc is clockwise
					// second arc is anticlockwise
					arc_1 = "a10,10 0 0 1 10,10 ";
					arc_2 = "a10,10 1 0 0 10,10 ";
					offset = -10;
				}

				return "M" + (pos_parent_right.x) + "," + (pos_parent_right.y) + " " +
					"L" +
					(pos_parent_right.x + 40) + "," + (pos_parent_right.y) + " " +
					arc_1 +
					"L" +
					(pos_parent_right.x + 50) + "," + (pos_child_left.y + offset) + " " +
					arc_2 +
					"L"+
					(pos_child_left.x) + "," + (pos_child_left.y);
			}
		}

		set_path_attributes(path, parent_id, child_id) {
			path.setAttribute("data-parent", parent_id);
			path.setAttribute("data-child", child_id);
			var parent = $(("[id=\"" + parent_id + "\"]"));

			if (parent.hasClass('active')) {
				path.setAttribute("class", "active-connector");
				path.setAttribute("marker-start", "url(#arrowstart-active)");
				path.setAttribute("marker-end", "url(#arrowhead-active)");
			} else {
				path.setAttribute("class", "collapsed-connector");
				path.setAttribute("marker-start", "url(#arrowstart-collapsed)");
				path.setAttribute("marker-end", "url(#arrowhead-collapsed)");
			}
		}

		set_selected_node(node) {
			// remove active class from the current node
			if (this.selected_node)
				{ this.selected_node.$link.removeClass('active'); }

			// add active class to the newly selected node
			this.selected_node = node;
			node.$link.addClass('active');
		}

		collapse_previous_level_nodes(node) {
			var node_parent = $(("[id=\"" + (node.parent_id) + "\"]"));
			var previous_level_nodes = node_parent.parent().parent().children('li');
			var node_card = undefined;

			previous_level_nodes.each(function() {
				node_card = $(this).find('.node-card');

				if (!node_card.hasClass('active-path')) {
					node_card.addClass('collapsed');
				}
			});
		}

		refresh_connectors(node_parent) {
			var this$1 = this;

			if (!node_parent) { return; }

			$(("path[data-parent=\"" + node_parent + "\"]")).remove();

			frappe.run_serially([
				function () { return this$1.get_child_nodes(node_parent); },
				function (child_nodes) {
					if (child_nodes) {
						$.each(child_nodes, function (_i, data) {
							this$1.add_connector(node_parent, data.id);
						});
					}
				}
			]);
		}

		setup_node_click_action(node) {
			var me = this;
			var node_element = $(("[id=\"" + (node.id) + "\"]"));

			node_element.click(function() {
				var is_sibling = me.selected_node.parent_id === node.parent_id;

				if (is_sibling) {
					me.collapse_node();
				} else if (node_element.is(':visible')
					&& (node_element.hasClass('collapsed') || node_element.hasClass('active-path'))) {
					me.remove_levels_after_node(node);
					me.remove_orphaned_connectors();
				}

				me.expand_node(node);
			});
		}

		setup_edit_node_action(node) {
			var node_element = $(("[id=\"" + (node.id) + "\"]"));
			var me = this;

			node_element.find('.btn-edit-node').click(function() {
				frappe.set_route('Form', me.doctype, node.id);
			});
		}

		remove_levels_after_node(node) {
			var this$1 = this;

			var level = $(("[id=\"" + (node.id) + "\"]")).parent().parent().parent().index();

			level = $('.hierarchy > li:eq('+ level + ')');
			level.nextAll('li').remove();

			var nodes = level.find('.node-card');
			var node_object = undefined;

			$.each(nodes, function (_i, element) {
				node_object = this$1.nodes[element.id];
				node_object.expanded = 0;
				node_object.$children = undefined;
			});

			nodes.removeClass('collapsed active-path');
		}

		remove_orphaned_connectors() {
			var paths = $('#connectors > path');
			$.each(paths, function (_i, path) {
				var parent = $(path).data('parent');
				var child = $(path).data('child');

				if ($(("[id=\"" + parent + "\"]")).length && $(("[id=\"" + child + "\"]")).length)
					{ return; }

				$(path).remove();
			});
		}
	};

	erpnext.HierarchyChartMobile = class {
		/* Options:
			- doctype
			- wrapper: wrapper for the hierarchy view
			- method:
				- to get the data for each node
				- this method should return id, name, title, image, and connections for each node
		*/
		constructor(doctype, wrapper, method) {
			this.page = wrapper.page;
			this.method = method;
			this.doctype = doctype;

			this.page.main.css({
				'min-height': '300px',
				'max-height': '600px',
				'overflow': 'auto',
				'position': 'relative'
			});
			this.page.main.addClass('frappe-card');

			this.nodes = {};
			this.setup_node_class();
		}

		setup_node_class() {
			var me = this;
			this.Node = class {
				constructor(ref) {
				var id = ref.id;
				var parent = ref.parent;
				var parent_id = ref.parent_id;
				var image = ref.image;
				var name = ref.name;
				var title = ref.title;
				var expandable = ref.expandable;
				var connections = ref.connections;
				var is_root = ref.is_root;

					// to setup values passed via constructor
					$.extend(this, arguments[0]);

					this.expanded = 0;

					me.nodes[this.id] = this;
					me.make_node_element(this);
					me.setup_node_click_action(this);
					me.setup_edit_node_action(this);
				}
			};
		}

		make_node_element(node) {
			var node_card = frappe.render_template('node_card', {
				id: node.id,
				name: node.name,
				title: node.title,
				image: node.image,
				parent: node.parent_id,
				connections: node.connections,
				is_mobile: true
			});

			node.parent.append(node_card);
			node.$link = $(("[id=\"" + (node.id) + "\"]"));
			node.$link.addClass('mobile-node');
		}

		show() {
			var me = this;
			if ($("[data-fieldname=\"company\"]").length) { return; }

			var company = this.page.add_field({
				fieldtype: 'Link',
				options: 'Company',
				fieldname: 'company',
				placeholder: __('Select Company'),
				default: frappe.defaults.get_default('company'),
				only_select: true,
				reqd: 1,
				change: function () {
					me.company = undefined;

					if (company.get_value() && me.company != company.get_value()) {
						me.company = company.get_value();

						// svg for connectors
						me.make_svg_markers();

						if (me.$sibling_group)
							{ me.$sibling_group.remove(); }

						// setup sibling group wrapper
						me.$sibling_group = $("<div class=\"sibling-group mt-4 mb-4\"></div>");
						me.page.main.append(me.$sibling_group);

						me.setup_hierarchy();
						me.render_root_nodes();
					}
				}
			});

			company.refresh();
			$("[data-fieldname=\"company\"]").trigger('change');
		}

		make_svg_markers() {
			$('#arrows').remove();

			this.page.main.prepend("\n\t\t\t<svg id=\"arrows\" width=\"100%\" height=\"100%\">\n\t\t\t\t<defs>\n\t\t\t\t\t<marker id=\"arrowhead-active\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto\" fill=\"var(--blue-500)\">\n\t\t\t\t\t\t<path d=\"M 0 0 L 10 5 L 0 10 z\"></path>\n\t\t\t\t\t</marker>\n\t\t\t\t\t<marker id=\"arrowhead-collapsed\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto\" fill=\"var(--blue-300)\">\n\t\t\t\t\t\t<path d=\"M 0 0 L 10 5 L 0 10 z\"></path>\n\t\t\t\t\t</marker>\n\n\t\t\t\t\t<marker id=\"arrowstart-active\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\" fill=\"var(--blue-500)\">\n\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"3.5\" fill=\"white\" stroke=\"var(--blue-500)\"/>\n\t\t\t\t\t</marker>\n\t\t\t\t\t<marker id=\"arrowstart-collapsed\" viewBox=\"0 0 10 10\" refX=\"3\" refY=\"5\" markerWidth=\"8\" markerHeight=\"8\" orient=\"auto\" fill=\"var(--blue-300)\">\n\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"3.5\" fill=\"white\" stroke=\"var(--blue-300)\"/>\n\t\t\t\t\t</marker>\n\t\t\t\t</defs>\n\t\t\t\t<g id=\"connectors\" fill=\"none\">\n\t\t\t\t</g>\n\t\t\t</svg>");
		}

		setup_hierarchy() {
			$("#connectors").empty();
			if (this.$hierarchy)
				{ this.$hierarchy.remove(); }

			if (this.$sibling_group)
				{ this.$sibling_group.empty(); }

			this.$hierarchy = $(
				"<ul class=\"hierarchy-mobile\">\n\t\t\t\t<li class=\"root-level level\"></li>\n\t\t\t</ul>");

			this.page.main.append(this.$hierarchy);
		}

		render_root_nodes() {
			var me = this;

			frappe.call({
				method: me.method,
				args: {
					company: me.company
				},
			}).then(function (r) {
				if (r.message.length) {
					var root_level = me.$hierarchy.find('.root-level');
					root_level.empty();

					$.each(r.message, function (_i, data) {
						return new me.Node({
							id: data.id,
							parent: root_level,
							parent_id: undefined,
							image: data.image,
							name: data.name,
							title: data.title,
							expandable: true,
							connections: data.connections,
							is_root: true
						});
					});
				}
			});
		}

		expand_node(node) {
			var is_same_node = (this.selected_node && this.selected_node.id === node.id);
			this.set_selected_node(node);
			this.show_active_path(node);

			if (this.$sibling_group) {
				var sibling_parent = this.$sibling_group.find('.node-group').attr('data-parent');
				if (node.parent_id !== undefined && node.parent_id != sibling_parent)
					{ this.$sibling_group.empty(); }
			}

			if (!is_same_node) {
				// since the previous/parent node collapses, all connections to that node need to be rebuilt
				// rebuild outgoing connections of parent
				this.refresh_connectors(node.parent_id, node.id);

				// rebuild incoming connections of parent
				var grandparent = $(("[id=\"" + (node.parent_id) + "\"]")).attr('data-parent');
				this.refresh_connectors(grandparent, node.parent_id);
			}

			if (node.expandable && !node.expanded) {
				return this.load_children(node);
			}
		}

		collapse_node() {
			var this$1 = this;

			var node = this.selected_node;
			if (node.expandable && node.$children) {
				node.$children.hide();
				node.expanded = 0;

				// add a collapsed level to show the collapsed parent
				// and a button beside it to move to that level
				var node_parent = node.$link.parent();
				node_parent.prepend(
					"<div class=\"collapsed-level d-flex flex-row\"></div>"
				);

				node_parent
					.find('.collapsed-level')
					.append(node.$link);

				frappe.run_serially([
					function () { return this$1.get_child_nodes(node.parent_id, node.id); },
					function (child_nodes) { return this$1.get_node_group(child_nodes, node.parent_id); },
					function (node_group) { return node_parent.find('.collapsed-level').append(node_group); },
					function () { return this$1.setup_node_group_action(); }
				]);
			}
		}

		show_active_path(node) {
			// mark node parent on active path
			$(("[id=\"" + (node.parent_id) + "\"]")).addClass('active-path');
		}

		load_children(node) {
			var this$1 = this;

			frappe.run_serially([
				function () { return this$1.get_child_nodes(node.id); },
				function (child_nodes) { return this$1.render_child_nodes(node, child_nodes); }
			]);
		}

		get_child_nodes(node_id, exclude_node) {
			if ( exclude_node === void 0 ) exclude_node=null;

			var me = this;
			return new Promise(function (resolve) {
				frappe.call({
					method: me.method,
					args: {
						parent: node_id,
						company: me.company,
						exclude_node: exclude_node
					}
				}).then(function (r) { return resolve(r.message); });
			});
		}

		render_child_nodes(node, child_nodes) {
			var this$1 = this;

			if (!node.$children) {
				node.$children = $('<ul class="node-children"></ul>')
					.hide()
					.appendTo(node.$link.parent());

				node.$children.empty();

				if (child_nodes) {
					$.each(child_nodes, function (_i, data) {
						this$1.add_node(node, data);
						$(("[id=\"" + (data.id) + "\"]")).addClass('active-child');

						setTimeout(function () {
							this$1.add_connector(node.id, data.id);
						}, 250);
					});
				}
			}

			node.$children.show();
			node.expanded = 1;
		}

		add_node(node, data) {
			var $li = $('<li class="child-node"></li>');

			return new this.Node({
				id: data.id,
				parent: $li.appendTo(node.$children),
				parent_id: node.id,
				image: data.image,
				name: data.name,
				title: data.title,
				expandable: data.expandable,
				connections: data.connections,
				children: undefined
			});
		}

		add_connector(parent_id, child_id) {
			var parent_node = document.getElementById(("" + parent_id));
			var child_node = document.getElementById(("" + child_id));

			var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');

			var connector = undefined;

			if ($(("[id=\"" + parent_id + "\"]")).hasClass('active')) {
				connector = this.get_connector_for_active_node(parent_node, child_node);
			} else if ($(("[id=\"" + parent_id + "\"]")).hasClass('active-path')) {
				connector = this.get_connector_for_collapsed_node(parent_node, child_node);
			}

			path.setAttribute('d', connector);
			this.set_path_attributes(path, parent_id, child_id);

			document.getElementById('connectors').appendChild(path);
		}

		get_connector_for_active_node(parent_node, child_node) {
			// we need to connect the bottom left of the parent to the left side of the child node
			var pos_parent_bottom = {
				x: parent_node.offsetLeft + 20,
				y: parent_node.offsetTop + parent_node.offsetHeight
			};
			var pos_child_left = {
				x: child_node.offsetLeft - 5,
				y: child_node.offsetTop + child_node.offsetHeight / 2
			};

			var connector =
				"M" +
				(pos_parent_bottom.x) + "," + (pos_parent_bottom.y) + " " +
				"L" +
				(pos_parent_bottom.x) + "," + (pos_child_left.y - 10) + " " +
				"a10,10 1 0 0 10,10 " +
				"L" +
				(pos_child_left.x) + "," + (pos_child_left.y);

			return connector;
		}

		get_connector_for_collapsed_node(parent_node, child_node) {
			// we need to connect the bottom left of the parent to the top left of the child node
			var pos_parent_bottom = {
				x: parent_node.offsetLeft + 20,
				y: parent_node.offsetTop + parent_node.offsetHeight
			};
			var pos_child_top = {
				x: child_node.offsetLeft + 20,
				y: child_node.offsetTop
			};

			var connector =
				"M" +
				(pos_parent_bottom.x) + "," + (pos_parent_bottom.y) + " " +
				"L" +
				(pos_child_top.x) + "," + (pos_child_top.y);

			return connector;
		}

		set_path_attributes(path, parent_id, child_id) {
			path.setAttribute("data-parent", parent_id);
			path.setAttribute("data-child", child_id);
			var parent = $(("[id=\"" + parent_id + "\"]"));

			if (parent.hasClass('active')) {
				path.setAttribute("class", "active-connector");
				path.setAttribute("marker-start", "url(#arrowstart-active)");
				path.setAttribute("marker-end", "url(#arrowhead-active)");
			} else if (parent.hasClass('active-path')) {
				path.setAttribute("class", "collapsed-connector");
			}
		}

		set_selected_node(node) {
			// remove .active class from the current node
			if (this.selected_node)
				{ this.selected_node.$link.removeClass('active'); }

			// add active class to the newly selected node
			this.selected_node = node;
			node.$link.addClass('active');
		}

		setup_node_click_action(node) {
			var me = this;
			var node_element = $(("[id=\"" + (node.id) + "\"]"));

			node_element.click(function() {
				var el = undefined;

				if (node.is_root) {
					el = $(this).detach();
					me.$hierarchy.empty();
					$("#connectors").empty();
					me.add_node_to_hierarchy(el, node);
				} else if (node_element.is(':visible') && node_element.hasClass('active-path')) {
					me.remove_levels_after_node(node);
					me.remove_orphaned_connectors();
				} else {
					el = $(this).detach();
					me.add_node_to_hierarchy(el, node);
					me.collapse_node();
				}

				me.expand_node(node);
			});
		}

		setup_edit_node_action(node) {
			var node_element = $(("[id=\"" + (node.id) + "\"]"));
			var me = this;

			node_element.find('.btn-edit-node').click(function() {
				frappe.set_route('Form', me.doctype, node.id);
			});
		}

		setup_node_group_action() {
			var me = this;

			$('.node-group').on('click', function() {
				var parent = $(this).attr('data-parent');
				if (parent === 'undefined') {
					me.setup_hierarchy();
					me.render_root_nodes();
				} else {
					me.expand_sibling_group_node(parent);
				}
			});
		}

		add_node_to_hierarchy(node_element, node) {
			this.$hierarchy.append("<li class=\"level\"></li>");
			node_element.removeClass('active-child active-path');
			this.$hierarchy.find('.level:last').append(node_element);

			var node_object = this.nodes[node.id];
			node_object.expanded = 0;
			node_object.$children = undefined;
			this.nodes[node.id] = node_object;
		}

		get_node_group(nodes, parent, collapsed) {
			var this$1 = this;
			if ( collapsed === void 0 ) collapsed=true;

			var limit = 2;
			var display_nodes = nodes.slice(0, limit);
			var extra_nodes = nodes.slice(limit);

			var html = display_nodes.map(function (node) { return this$1.get_avatar(node); }
			).join('');

			if (extra_nodes.length === 1) {
				var node = extra_nodes[0];
				html += this.get_avatar(node);
			} else if (extra_nodes.length > 1) {
				html = "\n\t\t\t\t" + html + "\n\t\t\t\t<span class=\"avatar avatar-small\">\n\t\t\t\t\t<div class=\"avatar-frame standard-image avatar-extra-count\"\n\t\t\t\t\t\ttitle=\"" + (extra_nodes.map(function (node) { return node.name; }).join(', ')) + "\">\n\t\t\t\t\t\t+" + (extra_nodes.length) + "\n\t\t\t\t\t</div>\n\t\t\t\t</span>\n\t\t\t";
			}

			if (html) {
				var $node_group =
					$(("<div class=\"node-group card cursor-pointer\" data-parent=" + parent + ">\n\t\t\t\t\t<div class=\"avatar-group right overlap\">\n\t\t\t\t\t\t" + html + "\n\t\t\t\t\t</div>\n\t\t\t\t</div>"));

				if (collapsed)
					{ $node_group.addClass('collapsed'); }

				return $node_group;
			}

			return null;
		}

		get_avatar(node) {
			return ("<span class=\"avatar avatar-small\" title=\"" + (node.name) + "\">\n\t\t\t<span class=\"avatar-frame\" src=" + (node.image) + " style=\"background-image: url(" + (node.image) + ")\"></span>\n\t\t</span>");
		}

		expand_sibling_group_node(parent) {
			var this$1 = this;

			var node_object = this.nodes[parent];
			var node = node_object.$link;

			node.removeClass('active-child active-path');
			node_object.expanded = 0;
			node_object.$children = undefined;
			this.nodes[node.id] = node_object;

			// show parent's siblings and expand parent node
			frappe.run_serially([
				function () { return this$1.get_child_nodes(node_object.parent_id, node_object.id); },
				function (child_nodes) { return this$1.get_node_group(child_nodes, node_object.parent_id, false); },
				function (node_group) {
					if (node_group)
						{ this$1.$sibling_group.empty().append(node_group); }
				},
				function () { return this$1.setup_node_group_action(); },
				function () { return this$1.reattach_and_expand_node(node, node_object); }
			]);
		}

		reattach_and_expand_node(node, node_object) {
			var el = node.detach();

			this.$hierarchy.empty().append("\n\t\t\t<li class=\"level\"></li>\n\t\t");
			this.$hierarchy.find('.level').append(el);
			$("#connectors").empty();
			this.expand_node(node_object);
		}

		remove_levels_after_node(node) {
			var level = $(("[id=\"" + (node.id) + "\"]")).parent().parent().index();

			level = $('.hierarchy-mobile > li:eq('+ level + ')');
			level.nextAll('li').remove();

			var node_object = this.nodes[node.id];
			var current_node = level.find(("[id=\"" + (node.id) + "\"]")).detach();

			current_node.removeClass('active-child active-path');

			node_object.expanded = 0;
			node_object.$children = undefined;

			level.empty().append(current_node);
		}

		remove_orphaned_connectors() {
			var paths = $('#connectors > path');
			$.each(paths, function (_i, path) {
				var parent = $(path).data('parent');
				var child = $(path).data('child');

				if ($(("[id=\"" + parent + "\"]")).length && $(("[id=\"" + child + "\"]")).length)
					{ return; }

				$(path).remove();
			});
		}

		refresh_connectors(node_parent, node_id) {
			if (!node_parent) { return; }

			$(("path[data-parent=\"" + node_parent + "\"]")).remove();
			this.add_connector(node_parent, node_id);
		}
	};

}(html2canvas));
//# sourceMappingURL=hierarchy-chart.min.js.map
